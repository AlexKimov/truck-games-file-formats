//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint i;
local float padding, size;

struct {
  UINT Count;
  UINT16 A;
  UINT16 B;
  BYTE Unknown[8]; 
} HEADER;

typedef struct {
  char Name[64];
  UINT16 Size;
  UINT16 Type;
} RECORD <optimize=false, name=getName>;

string getName(RECORD &rec)
{
  return rec.Name;
}

struct {
  RECORD Record[HEADER.Count];
} TABLE;

typedef struct (uint datasize, char name[64]) {
  local string Name = name;
  struct {
    UINT type;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Width;
    UINT Height;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Width1;
    UINT Height1;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
  } HEADER;
  if (HEADER.type == 19)
  {
    BYTE ImageData[HEADER.Width*HEADER.Height];
    BYTE Palette[1024];
  }
  if (HEADER.type == 20)
  {
    BYTE ImageData[HEADER.Width*HEADER.Height/2];
    BYTE Some[64];
  };
  if (HEADER.type == 0)
  {
     BYTE Data[HEADER.Width*HEADER.Height*4];  
  };
  if (HEADER.type == 2)
  {
    BYTE Data[HEADER.Width*HEADER.Height*2];  
  };
} TEXTURE <name=getTexName>;

string getTexName(TEXTURE &tex)
{
  return tex.Name;
}

if (sizeof(TABLE)%16.0 > 0)
{
  padding = 16.0 - sizeof(TABLE)%16.0;
  FSkip(padding);
}

struct {
  for (i = 0; i < HEADER.Count; ++i)
  {
    TEXTURE Texture(TABLE.Record[i].Size, TABLE.Record[i].Name);
    size = TABLE.Record[i].Size;
    if (size%16.0 > 0)
    {
      padding = 16.0 - size%16.0;
      FSkip(padding); 
    }   
  }
} TEXTURES;